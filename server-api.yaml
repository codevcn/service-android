openapi: 3.0.0
info:
  title: Task Management System API
  version: 1.0.0
  description: API for managing tasks, projects, and team collaboration

servers:
  - url: http://localhost:8080/api
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    ApiResponse:
      type: object
      properties:
        status:
          type: string
          enum: [success, error]
        data:
          type: object
          nullable: true
        error:
          type: string
          nullable: true

    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        email:
          type: string
          format: email
        fullName:
          type: string
        avatar:
          type: string
          nullable: true

    Project:
      type: object
      properties:
        id:
          type: integer
          format: int64
        projectName:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [ACTIVE, COMPLETED, ARCHIVED]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        owner:
          $ref: "#/components/schemas/User"

    Phase:
      type: object
      properties:
        id:
          type: integer
          format: int64
        phaseName:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [NOT_STARTED, IN_PROGRESS, COMPLETED]
        startDate:
          type: string
          format: date-time
        endDate:
          type: string
          format: date-time
          nullable: true
        orderIndex:
          type: integer
        project:
          $ref: "#/components/schemas/Project"

    Task:
      type: object
      properties:
        id:
          type: integer
          format: int64
        taskName:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [TODO, IN_PROGRESS, REVIEW, DONE]
        priority:
          type: string
          enum: [LOW, MEDIUM, HIGH, URGENT]
        dueDate:
          type: string
          format: date-time
          nullable: true
        allowSelfAssign:
          type: boolean
        orderIndex:
          type: integer
        phase:
          $ref: "#/components/schemas/Phase"
        assignedTo:
          $ref: "#/components/schemas/User"
          nullable: true

    Comment:
      type: object
      properties:
        id:
          type: integer
          format: int64
        content:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        task:
          $ref: "#/components/schemas/Task"

    File:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fileName:
          type: string
        fileType:
          type: string
        fileSize:
          type: integer
        filePath:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"
        task:
          $ref: "#/components/schemas/Task"

    Notification:
      type: object
      properties:
        id:
          type: integer
          format: int64
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/User"

paths:
  /auth/signup:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                email:
                  type: string
                  format: email
                password:
                  type: string
                fullName:
                  type: string
      responses:
        "201":
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /auth/login:
    post:
      summary: Authenticate user and get JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /auth/logout:
    post:
      summary: Logout user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /projects:
    get:
      summary: Get all projects for current user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    post:
      summary: Create a new project
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "201":
          description: Project created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /projects/{projectId}:
    get:
      summary: Get project by ID
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      summary: Update project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Project"
      responses:
        "200":
          description: Project updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      summary: Delete project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Project deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /projects/{projectId}/leave:
    delete:
      summary: Leave a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Successfully left the project
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /phases:
    post:
      summary: Create a new phase
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phase"
      responses:
        "200":
          description: Phase created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /phases/project/{projectId}:
    get:
      summary: Get all phases for a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of phases
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /phases/{id}:
    get:
      summary: Get phase by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Phase details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      summary: Update phase
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Phase"
      responses:
        "200":
          description: Phase updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      summary: Delete phase
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Phase deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /tasks:
    post:
      summary: Create a new task
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /tasks/phase/{phaseId}:
    get:
      summary: Get all tasks for a phase
      security:
        - BearerAuth: []
      parameters:
        - name: phaseId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of tasks
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /tasks/{id}:
    get:
      summary: Get task by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Task details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    put:
      summary: Update task
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
      responses:
        "200":
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
    delete:
      summary: Delete task
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Task deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /comments/{taskId}/{userId}:
    post:
      summary: Create a new comment
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          text/plain:
            schema:
              type: string
      responses:
        "200":
          description: Comment created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /comments/task/{taskId}:
    get:
      summary: Get all comments for a task
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of comments
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /comments/{commentId}:
    delete:
      summary: Delete a comment
      security:
        - BearerAuth: []
      parameters:
        - name: commentId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Comment deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /files/upload/{taskId}/{userId}:
    post:
      summary: Upload a file
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        "200":
          description: File uploaded successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /files/task/{taskId}:
    get:
      summary: Get all files for a task
      security:
        - BearerAuth: []
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of files
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /files/{fileId}:
    delete:
      summary: Delete a file
      security:
        - BearerAuth: []
      parameters:
        - name: fileId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: File deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /notifications:
    get:
      summary: Get all notifications for current user
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of notifications
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /notifications/{notificationId}/read:
    put:
      summary: Mark notification as read
      security:
        - BearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Notification marked as read
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /notifications/{notificationId}:
    delete:
      summary: Delete a notification
      security:
        - BearerAuth: []
      parameters:
        - name: notificationId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Notification deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /users/me:
    get:
      summary: Get current user profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Current user details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /users/{userId}/profile:
    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                fullname:
                  type: string
                email:
                  type: string
                  format: email
                avatar:
                  type: string
                  format: binary
      responses:
        "200":
          description: Profile updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /users/{userId}/password:
    put:
      summary: Update user password
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                oldPassword:
                  type: string
                newPassword:
                  type: string
      responses:
        "200":
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /users/search:
    get:
      summary: Search users by username or fullname
      security:
        - BearerAuth: []
      parameters:
        - name: query
          in: query
          required: true
          schema:
            type: string
      responses:
        "200":
          description: List of matching users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /members/projects/{projectId}:
    get:
      summary: Get all members of a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: List of project members
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"

  /members/{userId}/projects/{projectId}:
    get:
      summary: Get specific member details in a project
      security:
        - BearerAuth: []
      parameters:
        - name: projectId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Member details
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
